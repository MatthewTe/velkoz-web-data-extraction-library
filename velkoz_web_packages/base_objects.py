# Importing native packages:
import time

# Importing thrid party packages:
import requests

# Base objects for all web page objects:
class BaseWebResponse(object):
    """
    A Class representing a webpage extracted via requests libary.

    This is the Base class for all webpage objects used by web scrapers in the
    library. It contains all the HTML contents of the webpage extracted via the
    requests libary as well as relevant metadata about said contents extraction:
    date, etc.... Practically this base object is meant to serve as a rough
    abstraction layer for the result of the requests.get() method. It facilitates
    the creation of custom web page objects to be used by each web scraper in the
    library.

    Attributes:
        _url (str): The url of the webpage to be accessed with requests.get

        _initialized_time (float): The Unix timestamp when the object was initialized

        _kwargs (dictionary): Optional arguments that modify functionality of
            various methods within the object as well future-proofing further
            development of the Base Class.

        http_response (requests.Response obj): The HTTP Response generated by the
            webpage to which a GET request was sent. This is the result from the
            requests.get object.

    """

    def __init__(self, url, **kwargs):

        # Declaring all _private instance variables:
        self._url = url
        self._kwargs = kwargs
        self._initialized_time = time.time()

        # HTTP requests.Response object.
        self.http_response = self.__perform_get_request()

    def __perform_get_request(self):
        '''
        Internal method that performs the request.get() HTTP requests.

        The internal method performs the HTTP GET request to the url specificed
        by the self._url instance variable. It uses the requests.get() method to
        perform said GET request. In addition to the url it also passes in the
        'params' argument of the main objects **kwargs if present.

        Returns:
            response_obj: The result of the request.get() method- A requests.Response
                object.

        '''

        # Determining if the 'params' key-word argument has been passed:
        if 'params' in self._kwargs:

            # Try-Catch for the 'params' kwarg mainly to assert dictionary type:
            try:
                respone_obj = requests.get(self._url, params=kwargs['params'])
                return respone_obj

            except (AttributeError, TypeError):
                raise AssertionError("kwargs['params'] must be type dictionary")

        else:

            respone_obj = requests.get(self._url)
            return respone_obj


# TODO: Perform test on the **kwarg functionality of the Base Class.
