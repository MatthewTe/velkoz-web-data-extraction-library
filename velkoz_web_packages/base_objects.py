# Importing native packages:
import time

# Importing thrid party packages:
import requests
from bs4 import BeautifulSoup

# Base objects for all web page objects:
class BaseWebPageResponse(object):
    """
    A Class representing a webpage extracted via requests libary.

    This is the Base class for all webpage objects used by web scrapers in the
    library. It contains all the HTML contents of the webpage extracted via the
    requests libary as well as relevant metadata about said contents extraction:
    date, etc.... Practically this base object is meant to serve as a rough
    abstraction layer for the result of the requests.get() method. It facilitates
    the creation of custom web page objects to be used by each web scraper in the
    library.

    Attributes:
        _url (str): The url of the webpage to be accessed with requests.get

        _initialized_time (float): The Unix timestamp when the object was initialized

        _kwargs (dictionary): Optional arguments that modify functionality of
            various methods within the object as well future-proofing further
            development of the Base Class.

        _http_response (requests.Response obj): The HTTP Response generated by the
            webpage to which a GET request was sent. This is the result from the
            requests.get object.

        _html_body (BeautifulSoup obj): The root BeautifulSoup object that contains
            all the nested HTML objects returned by the HTTP GET request. This
            contains all of the HTML content of the webpage.

    Todo:
        * Implement Custom Logging at key elements of the scraper and all subsequent
            childern: BaseWebPageResponse(), EDGARResultsPageResponse()
    """

    def __init__(self, url, **kwargs):

        # Declaring all _private instance variables:
        self._kwargs = kwargs
        self._url = url
        self._initialized_time = time.time()

        # HTTP requests.Response object.
        self._http_response = self.__perform_get_request()

        # BeautifulSoup object for HTML body of response:
        self._html_body = BeautifulSoup(self._http_response.content, 'html.parser')

    def __perform_get_request(self):
        '''
        Internal method that performs the request.get() HTTP requests.

        The internal method performs the HTTP GET request to the url specificed
        by the self._url instance variable. It uses the requests.get() method to
        perform said GET request. In addition to the url it also passes in the
        'params' argument of the main objects **kwargs if present.

        Returns:
            response_obj: The result of the request.get() method- A requests.Response
                object.

        '''

        # Determining if the 'params' key-word argument has been passed:
        if 'params' in self._kwargs:

            # Try-Catch for the 'params' kwarg mainly to assert dictionary type:
            try:

                respone_obj = requests.get(self._url, params=self.kwargs['params'])
                return respone_obj

            except (AttributeError, TypeError):
                raise AssertionError("kwargs['params'] must be type dictionary")

        else:

            respone_obj = requests.get(self._url)
            return respone_obj

    def __repr__(self):
        return f'WebObject(url={self._url}, status={self._http_response.status_code})'

class BaseWebPageIngestionEngine(object):
    """
    A class representing the base object of a data ingestion engine.

    This is the Base class for the data ingestion engine. It represents a connection
    to a downstream database and is used to transform and write data extracted
    by a velkoz data object to any database it is connected. It performs writing
    to databases via the SQLAlchemy ORM.

    This object performs the same function as the BaseWebPageResponse() object. It
    serves as a base object for other custom data ingestion engines to be written.
    Ideally every new web scraping object that inherits from BaseWebPageResponse()
    should be written with an accompanying Ingestion Engine that Inherits from
    the BaseDataIngestionEngine().

    Attributes:
            *_WebPageResponseObjs (list): A list of arguments that are assumed (and type
                checked) to be instances of BaseWebPageResponse() objects or any object
                that uses BaseWebPageResponse() as its base.

    Todo:
        * Create database connection methods with SQLA.
        * Write method for default data writing.
        * Determine if the self._validation_dict should use dict comprehension
            as opposed to calling function. (Have only one method __get_validation_status().)
        * Write tests for the Base Ingestion Engine.
    """

    def __init__(self, *_WebPageResponseObjs):

        # Declaring instance variables:
        self._WebPageResponseObjs = _WebPageResponseObjs

        # Performing validation/type checking on the *_WebResponseObj arguments:
        self._validation_dict = self.__validate_args()


    def __validate_args(self):
        '''
        A method used to collect data on and type check the argumens passed into the
        *_WebPageResponseObjs parameter.

        The method at base ensures that each element passed into the *argument is
        either an instance of BaseWebPageResponse or one of its subclasses. It
        iterates through the list of _WebPageResponseObjs and converts each object
        into a status code (in the same manner as an HTTP Response status code)
        that indicate the validation status of the *_WebPageResponseObjs elements).
        It does this by calling the __get_validation_status() method for each object
        in the list.

        It then builds a dictionary of key-value pairs {object: object_status_code}.
        It builds a dictionary in order to associate the status_code with the object
        for debugging purposes in the event of an error.

        Returns:
            dict: The dictionary that contains the key-value pairs of
                {object: object_status_code} generated from the list of arguments
                passed into *_WebPageResponseObjs.

        '''
        # Iterating through the list of _WebPageResponseObjs and determining obj type:
        object_type_dict = {obj:self.__get_validation_status(obj) for obj in self._WebPageResponseObjs}

        return object_type_dict

    def __get_validation_status(self, obj):
        '''
        The method used to convert an object into a validation status code.

        It simply uses conditionals to determine which status code to return. Base
        on the type(obj).

        The current status codes supported are:

        20 : The object is a direct instance of BaseWebPageResponse object.
        21 : The object is an instance of a subclass of BaseWebPageResponse object.
        10 : The object is not an instance of the base or subclass
            of a BaseWebPageResponse object.

        Args:
            obj (object): The object that is being validated.

        Returns:
            int: The status code generated by the object parameter.

        '''

        # Conditionals that determine which status codes to return:
        # TODO: Incorporate Switches when more comprehensive validation status are developed:
        if isinstance(obj, BaseWebPageResponse):
            return 20

        else:
            return 10
